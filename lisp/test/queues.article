* Queues

** Definition

A queue is a first-in first-out data structure. So that really means
is that the data structure maintains the ordering in which elements
are put in, well atleast the basic queue does so. Its consists of two
pointers: head that points to the front of the queue; and tail, that
points to the end of the queue

A queue exposes a couple of apis: enqueue and dequeue. Which as the
names say insert elements to the tail of the queue and remove elements
from the head of the queue.

Queues come in a number of flavours, the most rudimentary being the
basic queue, that just dequeues elements as enqueued. The slightly
more complicated priority queue, that dequeues elements based on the
priority of the key of the element in the queue, to the amazing queues
that handle messaging and provide transaction and time guarantees in a
large system.

Queues play pretty crucial roles in number algorithms such as
Dijkstra's algorithm, or the breadth first search. But they are also
used in enterprise computing to batch out computation jobs, help
isolate components of a large system.

** Implementation

Basic queues can be implemented using linked lists or arrays. Queues
implemented as linked lists are simple. You maintain two pointers, one
to the head and another to the tail of the list. When you enqueue an
element you add it to the end of the list and make that the new
tail. When you dequeue an element, you move the head pointer forward
by one node and free the previous node.

The implementation that I will be providing is the implementation
using arrays. Firstly because I have some pretty embarassing memories
trying to write this program up. It can be
found <a href="queues.c">here </a>

CODE_START
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>

#define QUEUE_SIZE 10
#define EMPTY_QUEUE -110218

typedef struct queue{
    int *queue;
    int head;
    int tail;
} queue;

void initialize_queue(queue *q){
    q->queue = (int *)malloc(sizeof(int) * QUEUE_SIZE);
    q->head = -1;
    q->tail = -1;

}

void enqueue(queue *q, int element){
    if (q->head == 0 && q->tail == QUEUE_SIZE-1 || q->tail + 1 == q->head){
        printf("Queue full\n");
        return;
    }
        
    if (q->head == -1)
        q->head = 0;
    q->tail = (q->tail + 1) % QUEUE_SIZE;
    q->queue[q->tail] = element;
}


int dequeue(queue *q){ 
    if (q->head == -1){
        printf("Queue empty\n");
        return EMPTY_QUEUE;
    }
        
    int element = q->queue[q->head];
    if (q->head == q->tail)
        q->head = q-> tail = -1;
    else
        q->head = (q->head + 1) % QUEUE_SIZE;
    return element;
}


void print_queue(queue *q){
    int i = q->head;

    if (q->head == -1){
        printf("Queue empty\n");
        return;
    }

    printf("%d ", q->queue[i]);
    
    while(i != q->tail){
        i = (i + 1) % QUEUE_SIZE;
        printf("%d ", q->queue[i]);
    }
    printf("\n");
}

void free_queue(queue *q){
    free(q->queue);
    free(q);
}


int main(){
    queue *q;
    q = (queue *)malloc(sizeof(struct queue));
       
    initialize_queue(q);
    enqueue(q, 10);
    dequeue(q);
    dequeue(q);
    enqueue(q, 10);
    enqueue(q, 10);
    enqueue(q, 10);
    print_queue(q);
}
CODE_END
